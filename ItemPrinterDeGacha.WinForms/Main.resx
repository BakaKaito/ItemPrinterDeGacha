<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW/wAA1v8XANX/RgDW/xcA1f8AANX/AADU/xkA1f9JANX/FwDV
        /wAAAAAAANb/AADW/wYA1v9AANX/KwDX/wEA1P8AANT/CgDV/0AA1f8uANX/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANb/AADW/zwA1v/XANb/swDW/1QA1v9RANb/tADW
        /9kA1v88ANb/AAAAAAAA1v8AANb/DwDW/7UA1v/OANb/cgDV/z8A1v+TANb/4ADW/3gA1v8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1f8AANX/KgDW/9MA1v//ANb/9ADW
        //MA1v//ANb/0gDV/ykA1f8AAAAAAADV/wAA1P8JANb/ngDW//8A1v/5ANb/8ADW//0A1v/2ANX/XQDW
        /wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW/wAA1v8WANb/vwDW
        //8A1v//ANb//wDW//8D1fzDYq+cJ+1yBBbUdxkY1nYWGNV7HxkO0PCHANb//wDW//8A1v//ANb//wDW
        //AA1v9BANb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1f8AANP/AgDW
        /1gA1v/kANb//wDW//8A1v//ANb//wnS9fN1poTZ0Xkd4tR2GefVdxfnrYtE4ynF0+0A1v//ANb//wDW
        //8A1v//ANb/+wDW/5cA1v8VANL/AAD2/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN3/AADq
        /wEA1v9YANb/4wDW//8A1v//ANb//wDW//8A1v//ANf//xHO7P+Am3L/0XYZ/66GQP82vsT/Adf+/wDW
        //8A1v//ANb//wDW//8A1///ANb/+QDW/50A1/8QANb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAA2P8AANj/CQDW/4MA1v/QB9P46AXU+f4A1v//ANb//wbT+f8ayuL/KMPS/2WokP/JeiL/kZRf/y7B
        zP8eyN7/C9Hy/wDW//8A1v//AtX9/xLO7P4N0fHfANf/rQDW/yUA1v8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAO0/MAAOj/DG2tkUedklfQWK6e/wDW/v8A1v//UrGl/6aKSv+5hDf/zH0j/9p+
        G//QfCD/u4M0/6uJRf9/nHP/Ds/w/wDX//8qw9H/lZJb/62NR8aQoW00/yYAAB3M5AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPeTHAD/lRYM8I4cmON/Fvyuh0H/IMfc/xrL4/+ni0n/4n4W/+qL
        HP/ukB//8ZQh/+6RH//rjB3/5YQZ/858If9Ls6z/BNX7/3egfP/aexf/6Ikb/PCRHpb6mCEN9ZUeAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADznBwA9K0OAfKWIWbzliH17pEf/9R8Hf9tpIf/ZaeP/9F7
        H//tjx//85Yh//OWIf/zliH/85Yh//OWIf/ylCD/4IEZ/5qPVv9HtbD/uoE0/+aHHf/zliH/85Yh9fKV
        IGf0qhMB85sdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPKWIADyliAu85Yh1fOWIf/zliH/5Ygd/858
        If/NeyH/44Yc//KVIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/sjx//1X0d/8l7JP/cgBz/75Ig//OW
        If/zliH/85Yh1fKVIC7ylSAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0lSEA9pMhA/OWIX/zliH+85Yh//OW
        If/xlCH/644f/+uOH//xlCH/85Yh/PKWINfzliGM9JYhY/SWIWPzliGN8pUg1/OWIfztkB//6owe/++S
        IP/zliH/85Yh//OWIf/zliH+85YhffOZIQPzlyEAAAAAAAAAAAAAAAAAAAAAAPOVIQDylSEb85Uh0/OW
        If/zliH/85Yh//OWIf/0lyH/9Jch//OWIfryliCd8pUgKPOYHwTylh8A8pMeAPKTHgTzlSAo8pYgnvOW
        Ifr0lyH/85Yh//OWIf/zliH/85Yh//OWIf/yliHS8ZUiGvKWIQAAAAAAAAAAAAAAAAAAAAAA85YhAPOW
        IEzzliHy85Yh//OWIf/zliH/85Yh//OWIf/zliH/85YhrPKVIhfylSEA85YhBfOWIBTzliAU8pUhBfKV
        IQDylSEX85YhrfOWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIfLyliFL85YhAAAAAAAAAAAAAAAAAAAA
        AADzliEA8pYgSfOWIaLzliGm85YhpvOWIabzliGm85Yhp/OWIZ/zlSE285YiAPKWIQ7zliF485Yg1POW
        INPylSF29ZMjDPGTIQDylyA185Yhn/OWIafzliGm85YhpvOWIabzliGm85YhovKWIUnzliEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzliEA85YhYvOW
        IfXzliH/85Yh//OWIfPylSFe85YhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOW
        IQDzlSCe85Yh//OWIf/zliH/85Yh//OVIJ3zliEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA85YhAPOVIH/zliH985Yh//OWIf/zliH885YhfvOWIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOWIQDylSAp85YhV/OWIVnzliFZ85YhWfOW
        IVnzliFZ85YhVPOVIRrzlSEA9JUiIPOVIbDzliH285Yh9vOWIbL0lSIf8pYgAPKWIBnzliFU85YhWfOW
        IVnzliFZ85YhWfOWIVnzliFX8pUhKPOWIQAAAAAAAAAAAAAAAAAAAAAA85YhAPKWIF7zliH285Yh//OW
        If/zliH/85Yh//OWIf/zliH885YggvKWGwXulRsA9JUhGfOVIEzzlSBN85YhG/mVJQDylCMF85YhgvOW
        IfzzliH/85Yh//OWIf/zliH/85Yh//OWIfXyliFc85YhAAAAAAAAAAAAAAAAAAAAAADzliEA85cgKPOW
        IePzliH/85Yh//OWIf/zliH/85Yh//OWIf/ylSHr8pYgZvKVHwvylR8AAAAAAAAAAADylSEA8pUhC/KW
        IWfylSHs85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh4vOWISfzliEAAAAAAAAAAAAAAAAAAAAAAPOW
        IADzlh8J85YhnvOWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliHu8pUhnvKVIUr0lSAi9JUgIvOW
        IUvzliGe85Yh7vOWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliGd8ZQhCPKVIQAAAAAAAAAAAAAA
        AAAAAAAA+ZYmAPCWHwDyliFG85Yh6fOWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH+85Yh8vOW
        IenzliHp85Yh8vOWIf7zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh6fKWIUbwkiAA+J0kAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA8pgiAPKYIgvzlSGS85Yh/fOWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf3zliCT8pgfCvKY
        HwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA85YhAPOWICHzliHC85Yh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85YgwvSW
        ICLzlSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0lSAA5pUuAPOVITfylSHI85Yh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//KV
        IMnyliE466MaAPOUIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4mB4AXEJ0APOW
        IDPzlSG285Yh+fOWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        IfnzliG285YgMv+WFwDvliEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD3lSQA7ZcaAPSWIRvzliF/8pUh3fOWIfvzliH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yh//OW
        IfvyliDd85YhfvOUIRvsnRgA9pAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA9JQhAPSTIAXzliAq85YhfvOWIb3zliHe85Yh9POWIf7zliH+85Yh9POW
        Id7zliG985UhffOWICn0mCEF9JghAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOVIQDzlSEB85UhFfOWIDXyliBL8pYgVvKW
        IFbyliBL85YgNfOTIRXzkCMB85IiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/GOEf/wDgH/8A4B//AAAf/gAAD/wAAAf8AAAH/gAAD/4AAAf8AAAD/AA
        AA/gAAAH4AGAB+AEIAfgCBAH//gf///4H///+B//4AgQB+AEIAfgA8AH4AAAB/AAAA/wAAAP+AAAH/wA
        AD/+AAB//wAA//+AAf//4Af///////////8=
</value>
  </data>
</root>